name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.12'

jobs:
  # Continuous Integration - Runs on PRs to main and commits to main
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      run: |
        docker build -f docker/Dockerfile.dev -t mira-backend:test .

    - name: Code Quality - Linting
      run: |
        docker run --rm -v $(pwd):/app -w /app mira-backend:test \
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        docker run --rm -v $(pwd):/app -w /app mira-backend:test \
          black --check app/
        docker run --rm -v $(pwd):/app -w /app mira-backend:test \
          isort --check-only app/
      continue-on-error: true

    - name: Code Quality - Type Checking
      run: |
        docker run --rm -v $(pwd):/app -w /app mira-backend:test \
          mypy app/ --ignore-missing-imports

    - name: Security Scan
      run: |
        docker run --rm -v $(pwd):/app -w /app mira-backend:test \
          sh -c "pip install bandit && bandit -r app/ -f json -o bandit-report.json || true"

    - name: Run Tests
      run: |
        docker run --rm -v $(pwd):/app -w /app -e DATABASE_URL=sqlite:///./test.db mira-backend:test \
          pytest --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results.xml

  # Continuous Deployment - Runs only on commits to main branch
  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy Infrastructure
      run: |
        chmod +x scripts/deployment/deploy-infrastructure.sh
        ./scripts/deployment/deploy-infrastructure.sh ${{ github.event.inputs.environment || 'dev' }}

    - name: Deploy Application
      run: |
        chmod +x scripts/deployment/deploy-application.sh
        ./scripts/deployment/deploy-application.sh ${{ github.event.inputs.environment || 'dev' }}

    - name: Run Database Migrations
      run: |
        chmod +x scripts/deployment/migrate-database.sh
        ./scripts/deployment/migrate-database.sh ${{ github.event.inputs.environment || 'dev' }}

    - name: Run Health Checks
      run: |
        chmod +x scripts/deployment/health-check.sh
        ./scripts/deployment/health-check.sh ${{ github.event.inputs.environment || 'dev' }}

    - name: Notify Deployment Status
      if: always()
      run: |
        chmod +x scripts/deployment/notify-deployment.sh
        ./scripts/deployment/notify-deployment.sh ${{ job.status }} ${{ github.event.inputs.environment || 'dev' }}

  # Security and Compliance
  security:
    name: Security & Compliance
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      run: |
        docker build -f docker/Dockerfile.dev -t mira-backend:security .

    - name: Run Security Scan
      run: |
        docker run --rm -v $(pwd):/app -w /app mira-backend:security \
          sh -c "pip install safety && safety check --json --output safety-report.json || true"

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
